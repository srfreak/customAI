stages:
  - lint
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: registry.gitlab.com/srfreak/customai

before_script:
  - apk add --no-cache docker-cli docker-cli-compose

lint:
  stage: lint
  image: python:3.9
  script:
    - pip install -r requirements.txt
    - pytest  # or flake8, etc.
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -f docker/Dockerfile -t ${IMAGE_NAME}:${CI_COMMIT_SHA} .
    - docker push ${IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker tag ${IMAGE_NAME}:${CI_COMMIT_SHA} ${IMAGE_NAME}:latest
    - docker push ${IMAGE_NAME}:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy:
  stage: deploy
  image: alpine:latest
  needs: ["build"]
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "
        docker login -u '$CI_REGISTRY_USER' -p '$CI_REGISTRY_PASSWORD' $CI_REGISTRY &&
        docker pull ${IMAGE_NAME}:${CI_COMMIT_SHA} &&
        cd /srv/customai &&
        docker compose -f docker-compose.yml -f docker-compose.prod.yml pull &&
        docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --force-recreate
      "
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
  environment:
    name: production
